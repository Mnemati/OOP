import datetime

#store the next availble id for all new notes
last_id = 0

class Note:
    '''represent a note in a notebook. Match against 
    a string in searches and store tags for each note'''
    
    def __init__(self, memo, tags=''):
        '''represent a note with memo and 
        optional space-seperated tags. Automatically
        sets the note's creation date and a unique id.'''
        self.memo = memo
        self.tags = tags
        self.creation_date = datetime.date.today()
        global last_id
        last_id+=1
        self.id = last_id
    
    def match(self, filters):
        '''determine if this note matches 
        the filter text. Return True if it matches 
        ,False if not. Search is case sentesive and matches 
        both text and tags.'''
        return filters in self.memo or filters in self.tags
    
class Notebook:
    '''represent a collection of notes that can be tagged, modified and searched'''
    
    def __init__(self):
        '''initialize a notebook with an empty list'''
        self.notes = []
        
    def new_note(self, memo, tags = ''):
        '''create a new note and add it to the notebook list'''
        self.notes.append(Note(memo, tags))
        
    def modify_memo(self, note_id, memo):
        '''find the note with the given id and change the content'''
        for note in self.notes:
            if note.id == note.id:
                note.memo = memo
                break
    def modify_tags(self, note_id, tags):
        '''find a note with the given id and change the tag'''
        for note in self.notes:
            if note.id == note.id:
                note.tags = tags
                break
                
    def search(self, filters):
        '''find all notes that match the given filter string'''
        return [note for note in self.notes if note.match(filters)]
                    
    

import sys
from notebook import Notebook
class Menu:
    '''Display a menu and respond to choices when run'''
    
    def __init__(self):
        self.notebook = Notebook()  # self.notebook is an object under Notebook class
        self.choices = {
            '1': self.show_notes,
            '2': self.search_notes,
            '3': self.add_note,
            '4': self.modify_note,
            '5':self.quit,
        }
        
    def display_menu(self):
        print(
        '''
        Notebook Menu
        
        1. Show all Notes
        2. Search Notes
        3. Add Notes
        4. Modify Notes
        5. Quit
        ''')
        
    def run(self):
        '''display the menu and respond to choices'''
        
        while True:
            self.display_menu()
            choice = input('Enter one of the options above:')
            action = self.choices.get(choice) # it is the same as self.choices[choice]
            if action:
                action()
            else:
                print('{0} is not a valid choice'.format(choice))
                
        def show_notes(self, notes = None):
            if not notes:
                notes = self.notebook.notes
            for note in notes:
                print('{0}: {1}\n{2}'.format(note.id, note.tags, note.memo))
                
        def search_notes(self):
            filters = input('search for:')
            notes = self.notebook.search(filters)
            self.show_notes(notes)
        
        def add_note(self):
            memo = input('Enter a memo:')
            self.notebook.new_note(memo)
            print('a new note is added')
            
        def modify_note(self):
            ID = input('Enter a note id:')
            memo = input('Enter a memo:')
            tags = input('Enter tags:')
            
            if memo:
                self.notebook.modify_memo(ID, memo)
            if tags:
                self.notebook.modify_tags(ID, tags)
                
        def quit(self):
            print('Tanks for using notebook today')
            sys.exit(0)
            
if __name__ == '__main__':
    Menu().run()
